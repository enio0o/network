11
1# Установка и настройка сервера баз данных23## Установка45### Астра67```8apt install postgresql #Установится postgres119```1011На этом установка завершена, СУБД приезжает уже настроенной и готовой к работе.1213### Альт1415```16apt-get install postgresql11 postgresql11-server postgresql11-contrib17/etc/init.d/postgresql initdb18vim /var/lib/pgsql/data/postgresql.conf19# Ищем строчку, которая начинается на listen, раскомментируем и прописываем *20listen_addresses = '*'21vim /var/lib/pgsql/data/pg_hba.conf22Ищем строчку host со 127.0.0.1 и меняем на 0.0.0.0/023host all all 0.0.0.0/0 trust24systemctl restart postgresql25```2627## Работа с базами2829На астре все действия происходят через3031```32su - postgres33psql34```3536На альте через3738```39psql -U postgres40```4142### Создаем базы4344```45create database prod;46create database test;47create database dev;48```4950![Alt text](image.png)5152### Создаем юзеров5354```55create user produser with password 'P@ssw0rd';56create user devuser with password 'P@ssw0rd';57create user testuser with password 'P@ssw0rd';58```5960![Alt text](image-1.png)6162### Даем юзерам права на базы6364```65alter database dev owner to devuser;66alter database prod owner to produser;67alter database test owner to testuser;68```6970![Alt text](image-2.png)7172### создаем суперюзера7374```75create user dbadmin superuser;76alter user dbadmin with password 'P@ssw0rd';77```7879## Заполняем базы8081Делается не из шелла postgresql, а из баша8283### Астра8485```86su - postgres87pgbench -i dev88pgbench -i test89pgbench -i prod90```9192![Alt text](image-3.png)9394На альте это делать не надо, туда будет идти р
епликация9596## Настройка репликации9798TOD
# Установка и настройка сервера баз данных
## Установка
### Астра
```
apt install postgresql #Установится postgres11
```
На этом установка завершена, СУБД приезжает уже настроенной и готовой к работе.
### Альт
```
apt-get install postgresql11 postgresql11-server postgresql11-contrib
/etc/init.d/postgresql initdb
vim /var/lib/pgsql/data/postgresql.conf
# Ищем строчку, которая начинается на listen, раскомментируем и прописываем *
listen_addresses = '*'
vim /var/lib/pgsql/data/pg_hba.conf
Ищем строчку host со 127.0.0.1 и меняем на 0.0.0.0/0
host all all 0.0.0.0/0 trust
systemctl restart postgresql
```
## Работа с базами
На астре все действия происходят через
```
su - postgres
psql
```
На альте через
```
psql -U postgres
```
### Создаем базы
```
create database prod;
create database test;
create database dev;
```
![Alt text](image.png)
### Создаем юзеров
```
create user produser with password 'P@ssw0rd';
create user devuser with password 'P@ssw0rd';
create user testuser with password 'P@ssw0rd';
```
![Alt text](image-1.png)
### Даем юзерам права на базы
```
alter database dev owner to devuser;
alter database prod owner to produser;
alter database test owner to testuser;
```
![Alt text](image-2.png)
### создаем суперюзера
```
create user dbadmin superuser;
alter user dbadmin with password 'P@ssw0rd';
```
## Заполняем базы
Делается не из шелла postgresql, а из баша
### Астра
```
su - postgres
pgbench -i dev
pgbench -i test
pgbench -i prod
```
![Alt text](image-3.png)
На альте это делать не надо, туда будет идти репликация


1# Настройка дисковой подсистемы23## Зеркалируемый LVM на SRV145Находим диски, из которых будем собирать LVM через `lsblk`67Названия дисков будут отличаться. Выглядеть диски должны как неиспользуемые.89![Alt text](image.png)1011Сначала диски надо подготовить 1213```14fdisk /dev/vdb15n16enter17enter18enter19t208e21w22```23![Alt text](image-1.png)2425Второй готовим по аналогии2627Далее собирем LVM2829```30pvcreate /dev/vdb1 /dev/vdc131vgcreate hitech_vg /dev/vdb1 /dev/vdc132lvcreate -l 100%FREE -m1 -n mirror hitech_vg33```34![Alt text](image-2.png)3536Проверить можно через `lvdisplay -v`3738![Alt text](image-3.png)3940Далее, нужно автоматически монтировать в `/opt/data`4142Делаем файловую систему4344```45mkfs.xfs /dev/hitech_vg/mirror46```4748![Alt text](image-4.png)4950Создаем каталог и добавляем запись в fstab5152```53mkdir /opt/data54vim /etc/fstab55/dev/hitech_vg/mirror /opt/data xfs defaults 0 056```5758Проверить можно через `mount -av`5960![Alt text](image-5.png)6162## Шифрованный на SRV26364Производим подготовку и сборку LVM точно также как на SRV16566Надо учесть, что в альте нет `fdisk`6768Вместо него юзаем `sfdisk`6970```71sfdisk /dev/vdb72,73write74```7576![Alt text](image-6.png)7778Только в командочке `lvcreate` не пишем ключ `-m1`7980```81lvcreate -l 100%FREE -n encrypted hitech_vg82```8384Теперь шифруем примерно вот так8586```87cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --verify-passphrase /dev/hitech_vg/encrypted88```8990Пароль ставим не P@ssw0rd, что-нибудь посложнее91Главное не забыть9293![Alt text](image-7.png)9495Проверим, что оно зашифровалось через luksOpen9697```98cryptsetup luksOpen /dev/hitech_vg/encrypted unencrypted99```100101![Alt text](image-8.png)102103Том, который называется unencrypted уже можно монтировать104105Теперь надо сделать так, чтобы он нормально монтировался при загрузке без ввода пароля106107Для начала создаем ключик108109```110dd if=/dev/random bs=32 count=1 of=/root/key111cryptsetup luksAddKey /dev/sdb1 /root/key112```113114![Alt text](image-9.png)115116Потом добавляем в `/etc/crypttab` запись вида117118```119unencrypted /dev/hitech_vg/encrypted /root/key120```121122![Alt text](image-10.png)123124После этого надо ребутнуться и проверить, что диск расшифровывается при загрузке125126Смотрим `lsblk` -- если есть расшифрованный раздел, норм127128Не забываем добавить файлуху129130Добавляем в `fstab` запись с расшифрованным разделом131132```133/dev/mapper/unencrypted /opt/data xfs defaults 0 0134```

# Настройка дисковой подсистемы
## Зеркалируемый LVM на SRV1
Находим диски, из которых будем собирать LVM через `lsblk`
Названия дисков будут отличаться. Выглядеть диски должны как неиспользуемые.
![Alt text](image.png)
Сначала диски надо подготовить 
```
fdisk /dev/vdb
n
enter
enter
enter
t
8e
w
```
![Alt text](image-1.png)
Второй готовим по аналогии
Далее собирем LVM
```
pvcreate /dev/vdb1 /dev/vdc1
vgcreate hitech_vg /dev/vdb1 /dev/vdc1
lvcreate -l 100%FREE -m1 -n mirror hitech_vg
```
![Alt text](image-2.png)
Проверить можно через `lvdisplay -v`
![Alt text](image-3.png)
Далее, нужно автоматически монтировать в `/opt/data`
Делаем файловую систему
```
mkfs.xfs /dev/hitech_vg/mirror
```
![Alt text](image-4.png)
Создаем каталог и добавляем запись в fstab
```
mkdir /opt/data
vim /etc/fstab
/dev/hitech_vg/mirror /opt/data xfs defaults 0 0
```
Проверить можно через `mount -av`
![Alt text](image-5.png)
## Шифрованный на SRV2
Производим подготовку и сборку LVM точно также как на SRV1
Надо учесть, что в альте нет `fdisk`
Вместо него юзаем `sfdisk`
```
sfdisk /dev/vdb
,
write
```
![Alt text](image-6.png)
Только в командочке `lvcreate` не пишем ключ `-m1`
```
lvcreate -l 100%FREE -n encrypted hitech_vg
```
Теперь шифруем примерно вот так
```
cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --verify-passphrase /dev/hitech_vg/encrypted
```
Пароль ставим не P@ssw0rd, что-нибудь посложнее
Главное не забыть
![Alt text](image-7.png)
Проверим, что оно зашифровалось через luksOpen
```
cryptsetup luksOpen /dev/hitech_vg/encrypted unencrypted
```
![Alt text](image-8.png)
Том, который называется unencrypted уже можно монтировать
Теперь надо сделать так, чтобы он нормально монтировался при загрузке без ввода пароля
Для начала создаем ключик
```
dd if=/dev/random bs=32 count=1 of=/root/key
cryptsetup luksAddKey /dev/sdb1 /root/key
```
![Alt text](image-9.png)
Потом добавляем в `/etc/crypttab` запись вида
```
unencrypted /dev/hitech_vg/encrypted /root/key
```
![Alt text](image-10.png)
После этого надо ребутнуться и проверить, что диск расшифровывается при загрузке
Смотрим `lsblk` -- если есть расшифрованный раздел, норм
Не забываем добавить файлуху
Добавляем в `fstab` запись с расшифрованным разделом
```
/dev/mapper/unencrypted /opt/data xfs defaults 0 0
```


1# Настройка системы централизованного журналирования23## Установка и настройка rsyslog45```6apt install rsyslog rsyslog-pgsql7```89при установке указываем пароль P@ssw0rd и сервер localhost1011База и подключение сконфигурируется автоматически1213![Alt text](image-1.png)1415```16vim /etc/rsyslog.conf17Раскомментим imtcp и imudp18```1920![Alt text](image.png)2122Перезапускаем rsyslog2324```25systemctl restart rsyslog26```2728Для удаленной отправки логов идем в `rsyslog.conf` на целевой машине и пишем2930```31*.* @10.0.10.1032```3334На элтексте смотри [eltex](../vesr/vesr.md#логи)3536## Установка loganalyzer3738Первым делом пропатчим таблицу, чтоб loganalyzer работал3940```41su - postgres42psql43\c Syslog44alter table systemevents add column processid int;45```4647Получаем архив с loganalyzer4849Ставим пакеты5051```52apt install apache2 php php-pgsql 53```5455Распаковываем loganalyzer5657```58rm -rf /var/www/html/*59tar xvf loganalyzer.tar.gz60mv loganalyzer/src/* /var/www/html/61touch /var/www/html/config.php62chmod 666 config.php63chown www-data:www-data /var/www/html/* -R64```6566Чуть правим конфигу апача6768```69vim /etc/apache2/apache2.conf70Ищем AstraMode и меняем на off71AstraMode off72```7374Заходим на сервер с логаналайзером7576![Alt text](image-2.png)7778Нажимаем на here7980![Alt text](image-3.png)8182Нажимаем на next8384![Alt text](image-4.png)8586И еще раз на next8788![Alt text](image-5.png)8990И еще раз на next9192![Alt text](image-7.png)9394Source type -> Database (PDO)9596Database Storage Engine -> Postgresql9798Database Name -> Syslog99100Database User -> postgres101102Database Password -> P@ssw0rd103104![Alt text](image-6.png)105106Ура победа, жмем finish107108![Alt text](image-8.png)

# Настройка системы централизованного журналирования
## Установка и настройка rsyslog
```
apt install rsyslog rsyslog-pgsql
```
при установке указываем пароль P@ssw0rd и сервер localhost
База и подключение сконфигурируется автоматически
![Alt text](image-1.png)
```
vim /etc/rsyslog.conf
Раскомментим imtcp и imudp
```
![Alt text](image.png)
Перезапускаем rsyslog
```
systemctl restart rsyslog
```
Для удаленной отправки логов идем в `rsyslog.conf` на целевой машине и пишем
```
*.* @10.0.10.10
```
На элтексте смотри [eltex](../vesr/vesr.md#логи)
## Установка loganalyzer
Первым делом пропатчим таблицу, чтоб loganalyzer работал
```
su - postgres
psql
\c Syslog
alter table systemevents add column processid int;
```
Получаем архив с loganalyzer
Ставим пакеты
```
apt install apache2 php php-pgsql 
```
Распаковываем loganalyzer
```
rm -rf /var/www/html/*
tar xvf loganalyzer.tar.gz
mv loganalyzer/src/* /var/www/html/
touch /var/www/html/config.php
chmod 666 config.php
chown www-data:www-data /var/www/html/* -R
```
Чуть правим конфигу апача
```
vim /etc/apache2/apache2.conf
Ищем AstraMode и меняем на off
AstraMode off
```
Заходим на сервер с логаналайзером
![Alt text](image-2.png)
Нажимаем на here
![Alt text](image-3.png)
Нажимаем на next
![Alt text](image-4.png)
И еще раз на next
![Alt text](image-5.png)
И еще раз на next
![Alt text](image-7.png)
Source type -> Database (PDO)
Database Storage Engine -> Postgresql
Database Name -> Syslog
Database User -> postgres
Database Password -> P@ssw0rd
![Alt text](image-6.png)
Ура победа, жмем finish
![Alt text](image-8.png)

1# Настройка системы централизованного журналирования23## Установка и настройка rsyslog45```6apt install rsyslog rsyslog-pgsql7```89при установке указываем пароль P@ssw0rd и сервер localhost1011База и подключение сконфигурируется автоматически1213![Alt text](image-1.png)1415```16vim /etc/rsyslog.conf17Раскомментим imtcp и imudp18```1920![Alt text](image.png)2122Перезапускаем rsyslog2324```25systemctl restart rsyslog26```2728Для удаленной отправки логов идем в `rsyslog.conf` на целевой машине и пишем2930```31*.* @10.0.10.1032```3334На элтексте смотри [eltex](../vesr/vesr.md#логи)3536## Установка loganalyzer3738Первым делом пропатчим таблицу, чтоб loganalyzer работал3940```41su - postgres42psql43\c Syslog44alter table systemevents add column processid int;45```4647Получаем архив с loganalyzer4849Ставим пакеты5051```52apt install apache2 php php-pgsql 53```5455Распаковываем loganalyzer5657```58rm -rf /var/www/html/*59tar xvf loganalyzer.tar.gz60mv loganalyzer/src/* /var/www/html/61touch /var/www/html/config.php62chmod 666 config.php63chown www-data:www-data /var/www/html/* -R64```6566Чуть правим конфигу апача6768```69vim /etc/apache2/apache2.conf70Ищем AstraMode и меняем на off71AstraMode off72```7374Заходим на сервер с логаналайзером7576![Alt text](image-2.png)7778Нажимаем на here7980![Alt text](image-3.png)8182Нажимаем на next8384![Alt text](image-4.png)8586И еще раз на next8788![Alt text](image-5.png)8990И еще раз на next9192![Alt text](image-7.png)9394Source type -> Database (PDO)9596Database Storage Engine -> Postgresql9798Database Name -> Syslog99100Database User -> postgres101102Database Password -> P@ssw0rd103104![Alt text](image-6.png)105106Ура победа, жмем finish107108![Alt text](image-8.png)
# Настройка системы централизованного журналирования
## Установка и настройка rsyslog
```
apt install rsyslog rsyslog-pgsql
```
при установке указываем пароль P@ssw0rd и сервер localhost
База и подключение сконфигурируется автоматически
![Alt text](image-1.png)
```
vim /etc/rsyslog.conf
Раскомментим imtcp и imudp
```
![Alt text](image.png)
Перезапускаем rsyslog
```
systemctl restart rsyslog
```
Для удаленной отправки логов идем в `rsyslog.conf` на целевой машине и пишем
```
*.* @10.0.10.10
```
На элтексте смотри [eltex](../vesr/vesr.md#логи)
## Установка loganalyzer
Первым делом пропатчим таблицу, чтоб loganalyzer работал
```
su - postgres
psql
\c Syslog
alter table systemevents add column processid int;
```
Получаем архив с loganalyzer
Ставим пакеты
```
apt install apache2 php php-pgsql 
```
Распаковываем loganalyzer
```
rm -rf /var/www/html/*
tar xvf loganalyzer.tar.gz
mv loganalyzer/src/* /var/www/html/
touch /var/www/html/config.php
chmod 666 config.php
chown www-data:www-data /var/www/html/* -R
```
Чуть правим конфигу апача
```
vim /etc/apache2/apache2.conf
Ищем AstraMode и меняем на off
AstraMode off
```
Заходим на сервер с логаналайзером
![Alt text](image-2.png)
Нажимаем на here
![Alt text](image-3.png)
Нажимаем на next
![Alt text](image-4.png)
И еще раз на next
![Alt text](image-5.png)
И еще раз на next
![Alt text](image-7.png)
Source type -> Database (PDO)
Database Storage Engine -> Postgresql
Database Name -> Syslog
Database User -> postgres
Database Password -> P@ssw0rd
![Alt text](image-6.png)
Ура победа, жмем finish
![Alt text](image-8.png)




1# Настройка дисковой подсистемы23## Зеркалируемый LVM на SRV145Находим диски, из которых будем собирать LVM через `lsblk`67Названия дисков будут отличаться. Выглядеть диски должны как неиспользуемые.89![Alt text](image.png)1011Сначала диски надо подготовить 1213```14fdisk /dev/vdb15n16enter17enter18enter19t208e21w22```23![Alt text](image-1.png)2425Второй готовим по аналогии2627Далее собирем LVM2829```30pvcreate /dev/vdb1 /dev/vdc131vgcreate hitech_vg /dev/vdb1 /dev/vdc132lvcreate -l 100%FREE -m1 -n mirror hitech_vg33```34![Alt text](image-2.png)3536Проверить можно через `lvdisplay -v`3738![Alt text](image-3.png)3940Далее, нужно автоматически монтировать в `/opt/data`4142Делаем файловую систему4344```45mkfs.xfs /dev/hitech_vg/mirror46```4748![Alt text](image-4.png)4950Создаем каталог и добавляем запись в fstab5152```53mkdir /opt/data54vim /etc/fstab55/dev/hitech_vg/mirror /opt/data xfs defaults 0 056```5758Проверить можно через `mount -av`5960![Alt text](image-5.png)6162## Шифрованный на SRV26364Производим подготовку и сборку LVM точно также как на SRV16566Надо учесть, что в альте нет `fdisk`6768Вместо него юзаем `sfdisk`6970```71sfdisk /dev/vdb72,73write74```7576![Alt text](image-6.png)7778Только в командочке `lvcreate` не пишем ключ `-m1`7980```81lvcreate -l 100%FREE -n encrypted hitech_vg82```8384Теперь шифруем примерно вот так8586```87cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --verify-passphrase /dev/hitech_vg/encrypted88```8990Пароль ставим не P@ssw0rd, что-нибудь посложнее91Главное не забыть9293![Alt text](image-7.png)9495Проверим, что оно зашифровалось через luksOpen9697```98cryptsetup luksOpen /dev/hitech_vg/encrypted unencrypted99```100101![Alt text](image-8.png)102103Том, который называется unencrypted уже можно монтировать104105Теперь надо сделать так, чтобы он нормально монтировался при загрузке без ввода пароля106107Для начала создаем ключик108109```110dd if=/dev/random bs=32 count=1 of=/root/key111cryptsetup luksAddKey /dev/sdb1 /root/key112```113114![Alt text](image-9.png)115116Потом добавляем в `/etc/crypttab` запись вида117118```119unencrypted /dev/hitech_vg/encrypted /root/key120```121122![Alt text](image-10.png)123124После этого надо ребутнуться и проверить, что диск расшифровывается при загрузке125126Смотрим `lsblk` -- если есть расшифрованный раздел, норм127128Не забываем добавить файлуху129130Добавляем в `fstab` запись с расшифрованным разделом131132```133/dev/mapper/unencrypted /opt/data xfs defaults 0 0134```
# Настройка дисковой подсистемы
## Зеркалируемый LVM на SRV1
Находим диски, из которых будем собирать LVM через `lsblk`
Названия дисков будут отличаться. Выглядеть диски должны как неиспользуемые.
![Alt text](image.png)
Сначала диски надо подготовить 
```
fdisk /dev/vdb
n
enter
enter
enter
t
8e
w
```
![Alt text](image-1.png)
Второй готовим по аналогии
Далее собирем LVM
```
pvcreate /dev/vdb1 /dev/vdc1
vgcreate hitech_vg /dev/vdb1 /dev/vdc1
lvcreate -l 100%FREE -m1 -n mirror hitech_vg
```
![Alt text](image-2.png)
Проверить можно через `lvdisplay -v`
![Alt text](image-3.png)
Далее, нужно автоматически монтировать в `/opt/data`
Делаем файловую систему
```
mkfs.xfs /dev/hitech_vg/mirror
```
![Alt text](image-4.png)
Создаем каталог и добавляем запись в fstab
```
mkdir /opt/data
vim /etc/fstab
/dev/hitech_vg/mirror /opt/data xfs defaults 0 0
```
Проверить можно через `mount -av`
![Alt text](image-5.png)
## Шифрованный на SRV2
Производим подготовку и сборку LVM точно также как на SRV1
Надо учесть, что в альте нет `fdisk`
Вместо него юзаем `sfdisk`
```
sfdisk /dev/vdb
,
write
```
![Alt text](image-6.png)
Только в командочке `lvcreate` не пишем ключ `-m1`
```
lvcreate -l 100%FREE -n encrypted hitech_vg
```
Теперь шифруем примерно вот так
```
cryptsetup luksFormat --hash=sha512 --key-size=512 --cipher=aes-xts-plain64 --verify-passphrase /dev/hitech_vg/encrypted
```
Пароль ставим не P@ssw0rd, что-нибудь посложнее
Главное не забыть
![Alt text](image-7.png)
Проверим, что оно зашифровалось через luksOpen
```
cryptsetup luksOpen /dev/hitech_vg/encrypted unencrypted
```
![Alt text](image-8.png)
Том, который называется unencrypted уже можно монтировать
Теперь надо сделать так, чтобы он нормально монтировался при загрузке без ввода пароля
Для начала создаем ключик
```
dd if=/dev/random bs=32 count=1 of=/root/key
cryptsetup luksAddKey /dev/sdb1 /root/key
```
![Alt text](image-9.png)
Потом добавляем в `/etc/crypttab` запись вида
```
unencrypted /dev/hitech_vg/encrypted /root/key
```
![Alt text](image-10.png)
После этого надо ребутнуться и проверить, что диск расшифровывается при загрузке
Смотрим `lsblk` -- если есть расшифрованный раздел, норм
Не забываем добавить файлуху
Добавляем в `fstab` запись с расшифрованным разделом
```
/dev/mapper/unencrypted /opt/data xfs defaults 0 0
```
1# Настройка системы централизованного мониторинга23## Настраиваем сервер45Ставим пакеты67```8sudo apt install zabbix-server-pgsql zabbix-frontend-php php-pgsql9```1011Конфигурируем php1213```14vim /etc/php/7.3/apache2/php.ini15date.timezone = Europe/Moscow16```17Настраиваем базу данных1819```20su - postgres21psql22CREATE DATABASE ZABBIX;23CREATE USER zabbix WITH PASSWORD 'P@ssw0rd';24GRANT ALL ON DATABASE zabbix to zabbix;25```2627Импортируем схему2829```30zcat /usr/share/zabbix-server-pgsql/{schema,images,data}.sql.gz | psql -h localhost zabbix zabbix31```3233Включаем конфигу 3435```36a2enconf zabbix-frontend-php37systemctl restart apache238```3940Заходим в браузере по `hhtp://10.0.10.10/zabbix` и настраиваем zabbix4142![Alt text](image.png)4344Жмем Next step4546![Alt text](image-1.png)4748И еще раз Next step4950![Alt text](image-2.png)5152Заполняем как на картинке, снимаем галочку Database TLS encryption5354![Alt text](image-3.png)5556Жмем Next step5758![Alt text](image-4.png)5960И еще раз Next step6162![Alt text](image-5.png)6364Скачиваем конфигу и закидываем в `/etc/zabbix/zabbix.conf.php`6566![Alt text](image-6.png)6768Ура победа, жмем Finish6970Включаем zabbix-server7172```73systemctl enable --now zabbix-server74```7576Иногда может понадобиться указать пароль от бд в конфиге7778```79vim /etc/zabbix/zabbix_server.conf80DBPassword=P@ssw0rd81systemctl restart zabbix-server82```8384Дефолтные креды `Admin/zabbix`8586![Alt text](image-7.png)8788И не забываем поставить агента на сервер8990```91apt install zabbix-agent92```9394![Alt text](image-8.png)9596## Подключаем хосты9798Ставим zabbix-agent, идем в конфигу, меняем `Server=127.0.0.1` на `Server=10.0.10.10`99100После этого хост можно добавлять в zabbix101102В zabbox идем в `Configuration -> Hosts`103104![Alt text](image-9.png)105106Справа сверху нажимаем `Create host`107108![Alt text](image-10.png)109110Заполняем как на картинке111112После этого можно перейти в `Monitoring -> Dashboard -> All dashboards` и нажать `Create dashboard` в правом верхнем углу113114![Alt text](image-11.png)115116После этого добавляем виджеты, которые нам нужны117118![Alt text](image-12.png)119120Готово121122![Alt text](image-13.png)




# Настройка системы централизованного мониторинга
## Настраиваем сервер
Ставим пакеты
```
sudo apt install zabbix-server-pgsql zabbix-frontend-php php-pgsql
```
Конфигурируем php
```
vim /etc/php/7.3/apache2/php.ini
date.timezone = Europe/Moscow
```
Настраиваем базу данных
```
su - postgres
psql
CREATE DATABASE ZABBIX;
CREATE USER zabbix WITH PASSWORD 'P@ssw0rd';
GRANT ALL ON DATABASE zabbix to zabbix;
```
Импортируем схему
```
zcat /usr/share/zabbix-server-pgsql/{schema,images,data}.sql.gz | psql -h localhost zabbix zabbix
```
Включаем конфигу 
```
a2enconf zabbix-frontend-php
systemctl restart apache2
```
Заходим в браузере по `hhtp://10.0.10.10/zabbix` и настраиваем zabbix
![Alt text](image.png)
Жмем Next step
![Alt text](image-1.png)
И еще раз Next step
![Alt text](image-2.png)
Заполняем как на картинке, снимаем галочку Database TLS encryption
![Alt text](image-3.png)
Жмем Next step
![Alt text](image-4.png)
И еще раз Next step
![Alt text](image-5.png)
Скачиваем конфигу и закидываем в `/etc/zabbix/zabbix.conf.php`
![Alt text](image-6.png)
Ура победа, жмем Finish
Включаем zabbix-server
```
systemctl enable --now zabbix-server
```
Иногда может понадобиться указать пароль от бд в конфиге
```
vim /etc/zabbix/zabbix_server.conf
DBPassword=P@ssw0rd
systemctl restart zabbix-server
```
Дефолтные креды `Admin/zabbix`
![Alt text](image-7.png)
И не забываем поставить агента на сервер
```
apt install zabbix-agent
```
![Alt text](image-8.png)
## Подключаем хосты
Ставим zabbix-agent, идем в конфигу, меняем `Server=127.0.0.1` на `Server=10.0.10.10`
После этого хост можно добавлять в zabbix
В zabbox идем в `Configuration -> Hosts`
![Alt text](image-9.png)
Справа сверху нажимаем `Create host`
![Alt text](image-10.png)
Заполняем как на картинке
После этого можно перейти в `Monitoring -> Dashboard -> All dashboards` и нажать `Create dashboard` в правом верхнем углу
![Alt text](image-11.png)
После этого добавляем виджеты, которые нам нужны
![Alt text](image-12.png)
Готово
![Alt text](image-13.png)



1# Настройка доменных служб23## Устанавливаем freeipa45Ставим freeipa67Ставим хостнейм как fqdn. Обязательно маленькими буквами89```10hostnamectl set-hostname srv1.company.prof11```1213Прописываем адрес сервера в файл `hosts`1415```1610.0.10.10 srv1.company.prof srv117```1819Ставим пакеты2021```22apt install astra-freeipa-server23```2425Выполняем команду `astra-freeipa-server -e`2627![Alt text](image.png)2829Вводим пароль, его желательно запомнить3031Ожидаем конца развертывания, идти может долго323334По завершении появится файлик /tmp/ipa.system.records.< uuid >.db3536Надо выкатить его в файл зоны company.prof3738```39cat /tmp/ipa.system.records.*.db >> /etc/bind/company.prof40```4142После этого можно ребутать машину4344После ребута можно попробовать запросить керберос билет4546```47kinit admin48klist49```5051![Alt text](image-1.png)5253Также freeipa доступна в вебе5455![Alt text](image-2.png)5657## Создаем юзеров5859Для начала создаем три группы. Можно в вебе, можно через консоль6061```62kinit admin63ipa group-add group164ipa group-add group265ipa group-add group366```6768![Alt text](image-3.png)6970Пишем скрипт для создания юзеров7172```73for i in $(seq 30); do74    ipa -n user-add user$i --first user --last $i --password P@ssw0rd75    if [[ $i = [1-9] ]] || [[ $i = "10" ]]; then ipa -n group-add-member group1 --users=user$i; fi76    if [[ $i = 1[1-9] ]] || [[ $i = "20" ]]; then ipa -n group-add-member group2 --users=user$i; fi77    if [[ $i = 2[1-9] ]] || [[ $i = "30" ]]; then ipa -n group-add-member group3 --users=user$i; fi78done79```8081Пользователи успешно созданы8283![Alt text](image-4.png)8485## Вводим клиента в домен8687Ставим клиентский софт8889```90apt install astra-freeipa-client91```9293Не забываем настроить клиента на использование нашего DNS сервера9495```96echo 10.0.10.10 > /etc/resolv.conf97```9899Вводим машину в домен100101```102astra-freeipa-client --par --force103```104105![Alt text](image-5.png)106107Проверяем, что все в порядке108109![Alt text](image-6.png)110111112## Перемещаемые профили113114Ставим nfs сервер115116```117apt install nfs-kernel-server118```119120Создаем директорию, где будем хранить профили121122```123mkdir /homes124chmod 777 /homes125```126127Предоставляем общий доступ к директории128129```130vim /etc/exports131/homes *(rw,sync,no_root_squash)132```133134Перезапускаем nfs сервер для применения конфигурации135136```137systemctl restart nfs-kernel-server138```139140Через `exportfs -ra` можно проверить, что все как надо141142![Alt text](image-7.png)143144Далее монтируем на клиенты эту шару145146```147vim /etc/fstab14810.0.10.10:/homes /home nfs _netdev,defaults 0 0149```150151Проверяем через `mount -av`152153Монтируем на второго клиента аналогично154155Главное не заходить под одним юзером на две тачки

# Настройка доменных служб
## Устанавливаем freeipa
Ставим freeipa
Ставим хостнейм как fqdn. Обязательно маленькими буквами
```
hostnamectl set-hostname srv1.company.prof
```
Прописываем адрес сервера в файл `hosts`
```
10.0.10.10 srv1.company.prof srv1
```
Ставим пакеты
```
apt install astra-freeipa-server
```
Выполняем команду `astra-freeipa-server -e`
![Alt text](image.png)
Вводим пароль, его желательно запомнить
Ожидаем конца развертывания, идти может долго
По завершении появится файлик /tmp/ipa.system.records.< uuid >.db
Надо выкатить его в файл зоны company.prof
```
cat /tmp/ipa.system.records.*.db >> /etc/bind/company.prof
```
После этого можно ребутать машину
После ребута можно попробовать запросить керберос билет
```
kinit admin
klist
```
![Alt text](image-1.png)
Также freeipa доступна в вебе
![Alt text](image-2.png)
## Создаем юзеров
Для начала создаем три группы. Можно в вебе, можно через консоль
```
kinit admin
ipa group-add group1
ipa group-add group2
ipa group-add group3
```
![Alt text](image-3.png)
Пишем скрипт для создания юзеров
```
for i in $(seq 30); do
    ipa -n user-add user$i --first user --last $i --password P@ssw0rd
    if [[ $i = [1-9] ]] || [[ $i = "10" ]]; then ipa -n group-add-member group1 --users=user$i; fi
    if [[ $i = 1[1-9] ]] || [[ $i = "20" ]]; then ipa -n group-add-member group2 --users=user$i; fi
    if [[ $i = 2[1-9] ]] || [[ $i = "30" ]]; then ipa -n group-add-member group3 --users=user$i; fi
done
```
Пользователи успешно созданы
![Alt text](image-4.png)
## Вводим клиента в домен
Ставим клиентский софт
```
apt install astra-freeipa-client
```
Не забываем настроить клиента на использование нашего DNS сервера
```
echo 10.0.10.10 > /etc/resolv.conf
```
Вводим машину в домен
```
astra-freeipa-client --par --force
```
![Alt text](image-5.png)
Проверяем, что все в порядке
![Alt text](image-6.png)
## Перемещаемые профили
Ставим nfs сервер
```
apt install nfs-kernel-server
```
Создаем директорию, где будем хранить профили
```
mkdir /homes
chmod 777 /homes
```
Предоставляем общий доступ к директории
```
vim /etc/exports
/homes *(rw,sync,no_root_squash)
```
Перезапускаем nfs сервер для применения конфигурации
```
systemctl restart nfs-kernel-server
```
Через `exportfs -ra` можно проверить, что все как надо
![Alt text](image-7.png)
Далее монтируем на клиенты эту шару
```
vim /etc/fstab
10.0.10.10:/homes /home nfs _netdev,defaults 0 0
```
Проверяем через `mount -av`
Монтируем на второго клиента аналогично
Главное не заходить под одним юзером на две тачки




1# Настройка DNS23## Основной сервер45Ставим бинд67```8apt install bind99```1011Первый файл, который нужно поправить -- `/etc/bind/named.conf.options`1213```14forwarders { 77.88.8.8; };15dnssec-validation no;16listen-on { any; };17```1819![Alt text](image.png)2021Потом идем в `/etc/bind/named.conf.default-zones`2223В самом низу описываем нашу зону2425Прямую и обратную2627```28zone "company.prof" {29    type master;30    file "/etc/bind/company.prof";31};3233zone "0.10.in-addr.arpa" {34    type master;35    file "/etc/bind/0.10.in-addr.arpa";36};37```3839![Alt text](image-1.png)4041Идем в `/etc/bind` и создаем зоны из шаблона4243![Alt text](image-2.png)4445Открываем для редактирования прямую зону `company.prof`4647Заполняем зону4849![Alt text](image-3.png)5051Аналогично с обратной зоной5253![Alt text](image-4.png)5455Когда все сделано -- проверяемся через `named-checkconf -z`5657![Alt text](image-5.png)5859Если все в порядке -- `systemctl restart bind9`6061![Alt text](image-6.png)6263## split-brain6465Для реализации нужно настроить acl и view6667Заходим в `/etc/bind/named.conf.local`6869Пишем 2 acl7071```72acl "left" {10.0.10.0/24; };73acl "right" {10.0.20.0/24; };74```7576![Alt text](image-7.png)7778Далее в файле `/etc/bind/named.conf.default-zones` создаем views7980![Alt text](image-8.png)8182Очень важно поместить все созды в view left, то есть закрывающая скобка ставится внизу файла, после описания всех зон8384Внизу же размещается view right8586Во view right размещается зона company.prof, но путь к файлу будет другим8788![Alt text](image-9.png)8990Открываем для редактирования файл с зоной company.prof и добавляем туда запись test9192![Alt text](image-10.png)9394Копируем этот файл в company.prof.right и открываем файл для редактирования9596Меняем адрес записи test на адрес srv29798![Alt text](image-11.png)99100Все готово, теперь с из сети left запись будет резолвиться в адрес srv1, а из сети right в адрес srv2101102![Alt text](image-12.png)103104![Alt text](image-13.png)105106## Второй DNS сервер107108На мастер сервере заходим в файл с зоной и разрешаем ее скачивать109110![Alt text](image-14.png)111112На SRV2 ставим bind113114```115apt-get install bind116```117118Открываем `/etc/bind/options.conf`119120```121listen-on { any; };122```123124Далее открываем `/etc/bind/local.conf` и прописываем зоны125126![Alt text](image-15.png)127128После того, как все сделали  перезапускаем bind129130```131systemctl restart bind132```133134В логах можно посмотреть, приехал ли файл135136![Alt text](image-16.png)137138Файл недоступен для редактирования139140![Alt text](image-17.png)141142Резолв работает143144![Alt text](image-18.png)


# Настройка DNS
## Основной сервер
Ставим бинд
```
apt install bind9
```
Первый файл, который нужно поправить -- `/etc/bind/named.conf.options`
```
forwarders { 77.88.8.8; };
dnssec-validation no;
listen-on { any; };
```
![Alt text](image.png)
Потом идем в `/etc/bind/named.conf.default-zones`
В самом низу описываем нашу зону
Прямую и обратную
```
zone "company.prof" {
    type master;
    file "/etc/bind/company.prof";
};
zone "0.10.in-addr.arpa" {
    type master;
    file "/etc/bind/0.10.in-addr.arpa";
};
```
![Alt text](image-1.png)
Идем в `/etc/bind` и создаем зоны из шаблона
![Alt text](image-2.png)
Открываем для редактирования прямую зону `company.prof`
Заполняем зону
![Alt text](image-3.png)
Аналогично с обратной зоной
![Alt text](image-4.png)
Когда все сделано -- проверяемся через `named-checkconf -z`
![Alt text](image-5.png)
Если все в порядке -- `systemctl restart bind9`
![Alt text](image-6.png)
## split-brain
Для реализации нужно настроить acl и view
Заходим в `/etc/bind/named.conf.local`
Пишем 2 acl
```
acl "left" {10.0.10.0/24; };
acl "right" {10.0.20.0/24; };
```
![Alt text](image-7.png)
Далее в файле `/etc/bind/named.conf.default-zones` создаем views
![Alt text](image-8.png)
Очень важно поместить все созды в view left, то есть закрывающая скобка ставится внизу файла, после описания всех зон
Внизу же размещается view right
Во view right размещается зона company.prof, но путь к файлу будет другим
![Alt text](image-9.png)
Открываем для редактирования файл с зоной company.prof и добавляем туда запись test
![Alt text](image-10.png)
Копируем этот файл в company.prof.right и открываем файл для редактирования
Меняем адрес записи test на адрес srv2
![Alt text](image-11.png)
Все готово, теперь с из сети left запись будет резолвиться в адрес srv1, а из сети right в адрес srv2
![Alt text](image-12.png)
![Alt text](image-13.png)
## Второй DNS сервер
На мастер сервере заходим в файл с зоной и разрешаем ее скачивать
![Alt text](image-14.png)
На SRV2 ставим bind
```
apt-get install bind
```
Открываем `/etc/bind/options.conf`
```
listen-on { any; };
```
Далее открываем `/etc/bind/local.conf` и прописываем зоны
![Alt text](image-15.png)
После того, как все сделали  перезапускаем bind
```
systemctl restart bind
```
В логах можно посмотреть, приехал ли файл
![Alt text](image-16.png)
Файл недоступен для редактирования
![Alt text](image-17.png)
Резолв работает
![Alt text](image-18.png)

1# Настройка центра сертификации23## Создаем запрос для сертификата45```6vim /etc/openssl/openssl.cnf78# Параметры уже прописаны, находим, меняем910dir = /etc/ca11copy_extensions = copy12policy = policy_anything1314```1516```17vim /var/lib/ssl/misc/CA.pl1819$CATOP = "/etc/ca";20```2122Генерим ключ для подчиненного ца2324```25openssl genrsa -out subca.key 409626```2728![Alt text](image.png)2930Генерируем запрос3132```33openssl req -new -key subca.key -out subca.csr34```3536![Alt text](image-1.png)3738## Подписываем запрос


# Настройка центра сертификации
## Создаем запрос для сертификата
```
vim /etc/openssl/openssl.cnf
# Параметры уже прописаны, находим, меняем
dir = /etc/ca
copy_extensions = copy
policy = policy_anything
```
```
vim /var/lib/ssl/misc/CA.pl
$CATOP = "/etc/ca";
```
Генерим ключ для подчиненного ца
```
openssl genrsa -out subca.key 4096
```
![Alt text](image.png)
Генерируем запрос
```
openssl req -new -key subca.key -out subca.csr
```
![Alt text](image-1.png)
## Подписываем запрос


# Базовая настройка
vESR мы тут рассматривать не будем, он в отдельных файлах
## Настройка хостнейма
Работаем от рута или sudo
Делается либо записью файлика **/etc/hostname**, либо командочкой **hostnamectl**
Я рекомендую второй способ
Еще настоятельно рекомендую не забывать прописывать хостнейм в файле **/etc/hosts**
```
hostnamectl set-hostname sw1.company.prof
exec bash    #Применяем изменения без перезагрузки
vim /etc/hosts
# Ищем строчку, которая 127.0.1.1. ОБычно там прописан дефолтный хостнейм
# Меняем эту строчку на наш хостнейм, например
127.0.1.1 sw1 sw1.company.prof
```
Должно получится как-то так
![Alt text](image.png)
И вот так
![Alt text](image-1.png)
Надо отметить, что, на разных дистрах может быть по разоному
Например, на альте в файле **hosts** есть только 127.0.0.1
Значит, эту запись и меняем
## Адресация
В основном, у нас есть три пути
1. GUI
2. nmtui
3. Конфиги
Действуем по следующей логике:
Нет nmtui -- идем в конфиги
GUI стараемся максимально не трогать.
Выбрали инструмент, дальше действуем по ситуации
### nmtui
При помощи командочки `nmtui` открываем nmtui
Выглядит типа вот так
![Alt text](image-2.png)
Тыкаем п.1
![Alt text](image-3.png)
Тыкаем на существующее соеденение и ставим ручную настройку ipv4
![Alt text](image-4.png)
Заполняем параметры, идем в самый низ, нажимаем ок
![Alt text](image-5.png)
Идем в подключится и перезапускаем наше соеденение
![Alt text](image-6.png)
Проверяем, что у нас все получилось, при помощи командочки `ip --br a` (Иногда ключа --br может не быть)
![Alt text](image-7.png)
Такой фокус повторяем для всех интерфейсов, если у нас их несколько
### Astra (и deb-based) Конфиги
Открываем файлик **/etc/network/interfaces** и заполняем как на картинке
`auto` -- добавить интерфейс в автозапуск
`iface ... inet ...` -- настройка интерфейса
Выяснить, какие интерфейсы у нас есть можно через `ip a`
![Alt text](image-8.png)
После того, как заполнили конфигу для всех интерфейсов перезапускаем демон сети
`systemctl restart networking`
Проверяем также через `ip a`
### alt linux (rpm-based но не все)
В альте нет нетворкменеджера по умолчанию, покрайней мере на сервере
Придется работать через конфиги
В основном, в альте используется **etcnet**
Настраивается записью параметров в файлики
Прежде чем менять какие-то настройки -- надо отредактировать файл **/etc/net/ifaces/< ifname >/options**
![Alt text](image-10.png)
Далее можно настроить сеть
![Alt text](image-11.png)
## Создание пользователя
Делается впринципе везде одинаково
Для создания пользователя используем `useradd -m`
Так мы создадим юзера с домашней директорией
Для создания пароля используем `passwd < username >`
![Alt text](image-12.png)
Для проверки используем su - username
Зашли? Тогда все норм
![Alt text](image-13.png)
Вывод может выглядеть по разному, но суть одна
![Alt text](image-14.png)
## Настройка sudo
Для начала, надо проверить, есть ли у нас **sudo**
Для этого можно прописать командочку `sudo`
![Alt text](image-15.png)
Открылась справка -- норм
Если sudo нет -- надо его установить
В астре и deb-based делаем
```
apt update
apt install sudo
```
В alt linux делаем
```
apt-get update
apt-get install sudo
```
Дальше нужно сделать так, чтоб юзер мог выполнять команды из под sudo без пароля
Делается легко
```
echo "sshuser ALL=(ALL) NOPASSWD: ALL" >> /etc/sudoers
```
На альте еще хорошо бы добавить юзера wheel
```
usermod -aG wheel sshuser
```
Теперь можно зайти под sshuser и попробовать что-нибудь повыполнять от sudo
Пароль спросить не должно
![Alt text](image-16.png)
## Настройка ssh сервера
### Астра
Если вдруг ssh сервера нет -- можно его установить
```
apt update
apt install openssh-server
```
Потом открываем кофиг **/etc/ssh/sshd_config** и редактируем
```
#Port 22 -- раскометрировали, поменяли на 2023
Port 2023
#PasswordAuthentication yes -- раскомментили, заменили на no
PasswordAuthentication no
```
Сохранились, вышли, перезапустили ssh сервер
```
systemctl restart sshd
```
Пробуем постучаться на себя
Сбросит по стандартному порту, пошлет далеко и надолго без ключей
![Alt text](image-17.png)
### Альт
Если ssh сервера нет, его можно установить
```
apt-get update
apt-get install openssh-server
```
В альте конфига находится по пути **/etc/openssh/sshd_config**
В остальном, все дейсвтия полностью аналогичны тому, что на астре
## Настройка ssh клиента
Пилить конфигу для ssh клиента будем на уровне системы, чтобы уж точно не докапались
### Астра
Идем в **/etc/ssh/ssh_config**
Снизу прописываем что-то типа
```
Host <адрес srv1 или srv2>
    Port 2023
```
Например
![Alt text](image-18.png)
Прописывать надо сервера и по адресам, и по всем возможным именам
Далее нужно сгенерировать ключи и пробросить их под пользователя sshuser
```
ssh-keygen
```
После того, как ключи сгенерированы -- нужно пробросить их под юзера sshuser
Чтобы не страдать -- временно разрешаем парольную аутентификацию, пробрасываем ключи и запрещаем ее обратно
```
ssh-copy-id sshuser@10.0.10.10
```




